{
  "name": "temp-simple-ioc",
  "version": "3.0.9",
  "description": "Simple Inversion of Control for node.js",
  "main": "index.js",
  "scripts": {
    "test": "mocha --reporter spec --colors --recursive tests/unit && mocha --reporter spec --colors --recursive tests/function",
    "test-unit": "mocha --reporter spec --colors --recursive tests/unit",
    "test-function": "mocha --reporter spec --colors --recursive tests/function"
  },
  "keywords": [
    "ioc",
    "inversion",
    "of",
    "control"
  ],
  "author": {
    "name": "Joakim J. Rapp"
  },
  "license": "ISC",
  "devDependencies": {
    "mocha": "1.21.4"
  },
  "readme": "# simple-ioc\n============\n\nTODO: Description\n\n## Installation\n```\nnpm install simple-ioc\n```\n\n## Basic concept\n\nTODO: Description\n\n## ioc\n======\n\n### Methods\n-----------\n\n### getContainer()\nSee section [container](#log) for more information about containers.\n\n#### Arguments\nNone.\n\n#### Returns\nA new container.\n\n#### Remarks\nAfter the container is created, it has itself and the ioc registered.\n\n#### Example\n```javascript\nrequire( 'simple-ioc' ).getContainer()\n```\n\n***\n\n### getSettings()\nGets the settings the ioc uses. This method is used internally by the container.\n\n#### Arguments\nNone.\n\n#### Returns\nThe registered settings\n\n#### Remarks\nThe default settings for the ioc are\n```\n{\n\tlog: {\n\t\tlevel: 0,\n\t\tincludeEnvironemtVariables: { env: 'NODE_ENV' },\n\t\toutput: 'devNull'\n\t}\n}\n```\n\n#### Example\n```javascript\nrequire( 'simple-ioc' ).setSettings( {\n\tkey: 'value'\n} ).getSettings();\n// will return { key: 'value' } (if no settings was blank before)\n```\n\n***\n\n### setSettings( settings1, settings2, settings3... )\nSets the settings the ioc will read, currently the only root-property is log, see section [log](#log) for more information about the built in log.\n\n#### Arguments\nVariable amount of objects with settings, the settings will be merged with the existing settings.\n\n#### Returns\nThe ioc\n\n#### Remarks\nThe ioc has 4 built-in output-writers, these are\n* consoleJson - More or less console.log( JSON.stringify( logObject ) )\n* consoleReadable - Logs in a readable format, with some coloring of level\n* devNull - writes nothing\n* memoryJson - writes to memory, which is searchable afterwards. This should never be used in production, only in tests.\n\nThe default settings are:\n```\n{\n\tlog: {\n\t\tlevel: 0,\n\t\tincludeEnvironemtVariables: { env: 'NODE_ENV' },\n\t\toutput: 'devNull'\n\t}\n}\n```\n\n#### Example\n```javascript\nrequire( 'simple-ioc' ).setSettings( {\n\tlog: {\n\t\tlevel: 3\n\t},\n\t{\n\t\tincludeEnvironemtVariables: { env: 'ENVIRONMENT_NAME' }\n\t\toutput: 'consoleReadable'\n\t}\n}, {\n\t\n} ).getSettings();\n/*\nwill return\n\t{\n\t\tlevel: 3,\n\t\tincludeEnvironemtVariables: { env: 'ENVIRONMENT_NAME' },\n\t\toutput: 'consoleReadable'\n\t}\n*/\n```\n\n***\n\n### useLogWriter( resolvedWriter )\nThe internal logger can also use a external output writer, it must implement the following functions:\n* output( logObject ) - called on every log that is on a level that should be logged.\n* getEntries( component ) - can be implemented, but should not be used in production\n* reset() - if getEntries is implemented, this one should too.\n\n#### Arguments\n* resolvedWriter - an object that implements at least output( logObject )\n\n#### Returns\nthe ioc.\n\n#### Remarks\nNone.\n\n#### Example\n```javascript\nrequire( 'simple-ioc' ).useLogWriter( {\n\toutput: function( logObject ) {\n\t\tconsole.log( logObject.level );\n\t}\n} );\n// Will only ouptut the level of the log (numeric) to the console.\n```\n\n***\n\n## log\n======\n\nThe ioc has a built in logger that can be used externaly as well. The logger builds a logObject that looks like this:\n```javascript\n{\n\tlevel: level,\n\tmessage: message,\n\tdata: data,\n\tcomponent: parentName,\n\t...environment variables specified in settings\n}\n```\n\nIn the log-settings you can specify envronment values that you would like to include in the log-objects\n```javascript\nincludeEnvironemtVariables: { enviro: 'ENV_NAME' }\n// Would include ENV_NAME as \"enviro\"\n```\n\nBy calling ``` registerIocLog( name ) ``` on the container the logger will be registered in the containeras the name specified. \n\n---\n\n## container\n============\nContainers are the central part of the ioc, it stores and resolves components.\n\nNote: All functions on the container returns the container itself.\n\n### Methods\n-----------\n\n### registerResolved( name, instance )\nRegisters a already resolved component to the container, e.g. external external componens like \"express\".\n\n#### Arguments\n* name - the identifying name of the component\n* instance - the resolved instance\nOR\n* name - An object with key/value pairs reprecenting names/instances\n\n#### Returns\nThe container\n\n#### Remarks\nNone.\n\n#### Example\n```javascript\nvar container = require( 'simple-ioc' ).getContainer()\n\t.registerResolved( http: require( 'http' ) )\n\t.registerResolved( {\n\t\texpress: require( 'express' ),\n\t\trequest: require( 'request' )\n\t} );\n\t// Registers http, express and request as http, express and request\n```\n\n***\n\n### registerInjectable( name, fn )\nRegisters an injectable component in the container, this method should normally be used when registering internal libraries which can use their own containers.\n\n#### Arguments\n* name - the identifying name of the component\n* fn - the injectable function\n\nOR\n\n* name - An object with key/value pairs reprecenting names/instances\n\n#### Returns\nThe container.\n\n#### Remarks\nInjectable functions has some reserved parameternames used by the ioc, these cannot be registered or used as normal dependencies. The reserved are (all are optional):\n* pub - can be used to set the values properties of the component. If it is not used the ioc will use whatever the component returns or if it has an asyncronous callback, whatever is used as the first argument.\n* setup - can be used if the component needs to be setup (will be used in future versions)\n* parentName - If used, the component will be transient instead of singleton. The vaule will be the name of the component that was depending on the component.\n* callback - If a component has this dependency the ioc will wait until callback is called before continuing resolving more components. \n\n#### Example\n```javascript\nvar container = require( 'simple-ioc' ).getContainer()\n\t.registerInjectable( 'myComponent', function( pub, callback ) {\n\t\tpub.func1 = function( params ) {\n\t\t\treturn whatEver;\n\t\t};\n\t\tdoSomething( function() {\n\t\t\tcallback();\n\t\t} )\n\t} ) // Registers a singleton component that has an async setup and a function func1 as myComponent\n\t.registerInjectable( {\n\t\tanotherComponent: function( setup, pub, callback ) {\n\t\t\tsetup( function() {\n\t\t\t\tsomeSetup( function() {\n\t\t\t\t\tpub.xxx = function() {\n\t\t\t\t\t\treturn amazingStuff;\n\t\t\t\t\t};\n\t\t\t\t\tcallback();\n\t\t\t\t} );\n\t\t\t} );\n\t\t\t// Registers a singleton component that has a setup that also is async. The result is a\n\t\t\t// component registered as anotherComponent with a function xxx.\n\t\t},\n\t\tyetAnother: function( parentName ) {\n\t\t\treturn {\n\t\t\t\tfunc3: function() {\n\t\t\t\t\treturn parentName;\n\t\t\t\t}\n\t\t\t};\n\t\t\t// Registeres a transient component as yetAnother with a function func3. Everytime yetAnother\n\t\t\t// is injected the registered function will be called, creating a new enclosed scope.\n\t\t}\n\t} );\n```\n\n\n***\n\n### registerGlobalWrappersFromSettings( settingsKey )\n\n#### Arguments\n\n#### Returns\n\n#### Remarks\n\n#### Example\n\n***\n\n### autoRegisterPath( relativePath )\n\n#### Arguments\n\n#### Returns\n\n#### Remarks\n\n#### Example\n\n***\n\n### resolve( name, callback )\n\n#### Arguments\n\n#### Returns\n\n#### Remarks\n\n#### Example\n\n***\n\n### registerIocSettings( name )\n\n#### Arguments\n\n#### Returns\n\n#### Remarks\n\n#### Example\n\n***\n\n### registerIocLog( name )\n\n#### Arguments\n\n#### Returns\n\n#### Remarks\n\n#### Example\n\n***\n\n### resolveAllAndInject( fn )\n\n#### Arguments\n\n#### Returns\n\n#### Remarks\n\n#### Example\n\n***\n\n### inject( fn, callback )\n\n#### Arguments\n\n#### Returns\n\n#### Remarks\n\n#### Example\n\n***\n\n### registerResolvedIfSetting ( settingKey, name, instance )\n\n#### Arguments\n\n#### Returns\n\n#### Remarks\n\n#### Example\n\n***\n\n### registerInjectableIfSetting( settingKey, name, fn )\n\n#### Arguments\n\n#### Returns\n\n#### Remarks\n\n#### Example\n\n***\n\n### autoRegisterPathInSetting( settingKey )\n\n#### Arguments\n\n#### Returns\n\n#### Remarks\n\n#### Example\n\n***\n",
  "readmeFilename": "README.md",
  "_id": "temp-simple-ioc@3.0.9",
  "_from": "temp-simple-ioc@"
}
