var anonymousParentResolver = require( './genericHelpers/anonymousParentResolver.js' )(),
	files = require( './containerHelpers/files.js' )(),
	injectableComponent = require( './containerHelpers/injectableComponent.js' )(),
	resolvedComponent = require( './containerHelpers/resolvedComponent.js' )(),
	IocError = require( './genericHelpers/IocError.js' )(),
	settingsHelper = require( './genericHelpers/settingsHelper.js' )(),
	resolver = require( './containerHelpers/resolver.js' )(),
	log = require( './log/log.js' )( 'container' ),
	errRerouter = require( './genericHelpers/errRerouter.js' )();
module.exports = function( ioc ) {
	var pub = {},
		store = require( './containerHelpers/store.js' )();
	pub.registerResolved = function( name, instance ) {
		if( typeof( name ) === 'string' ) {
			log.debug( 'registerResolved', name );
			if( store.isRegistered( name ) )
				throw new IocError( 'Component already registered', name );
			else
				store.setResolved( name, resolvedComponent.get( instance ) );
		}
		else
			Object.keys( name ).forEach( function( comnonentName ) {
				pub.registerResolved( comnonentName, name[ comnonentName ] );
			} );
		return pub;
	};
	var registerInjectable = function( name, fn ) {
		log.debug( 'registerInjectable', name );
		if( store.isRegistered( name ) )
			throw new IocError( 'Component already registered', name );
		else {
			var component = injectableComponent.get( fn );
			if( component.dependencies.hasUnused )
				log.error( name + ' has unused dependencies', component.dependencies.unused.map( function( dependency ) {
					return dependency.name;
				} ) );
			store.setInjectable( name, component );
		}
	};
	pub.registerInjectable = function( name, fn ) {
		if( typeof( name ) === 'string' )
			if( typeof( fn ) === 'function' )
				registerInjectable( name, fn );
			else
				throw( new IocError( 'Injectable is not a function', name ) );
		else
			Object.keys( name ).forEach( function( comnonentName ) {
				pub.registerInjectable( comnonentName, name[ comnonentName ] );
			} );
		return pub;
	};
	pub.registerGlobalWrappersFromSettings = function( settingsKey ) {
		var wrapSettings = settingsHelper.getSetting( ioc.getSettings(), settingsKey );
		if( wrapSettings )
			Object.keys( wrapSettings ).forEach( function( componentName ) {
				resolver.registerGlobalWrapper( componentName, pub.resolve.bind( pub, wrapSettings[ componentName ] ) );
			} );
		return pub;
	};
	pub.autoRegisterPath = function( relativePath ) {
		log.trace( 'autoRegisterPath', relativePath );
		var modulesInPath = files.getModulesInPath( relativePath, 2 );
		Object.keys( modulesInPath.injectables ).forEach( function( name ) {
			pub.registerInjectable( name, modulesInPath.injectables[ name ] );
		} );
		Object.keys( modulesInPath.resolved ).forEach( function( name ) {
			pub.registerResolved( name, modulesInPath.resolved[ name ] );
		} );
		return pub;
	};
	pub.resolve = function( name, callback ) {
		resolver.resolve( store, name, anonymousParentResolver.resolveName( 2 ), callback );
		return pub;
	};
	pub.registerIocSettings = function( name ) {
		pub.registerResolved( name, ioc.getSettings() );
		return pub;
	};
	pub.registerIocLog = function( name ) {
		pub.registerInjectable( 'log', require( './log/log.js' ) );
		return pub;
	};
	pub.resolveAllAndInject = function( fn ) {
		var nextResolvable = store.getAllResolvable().shift();
		if( nextResolvable )
			pub.resolve( nextResolvable, function( err, instance ) {
				if( err )
					log.fatal( 'resolveAllAndInject failed when resolving component', err );
				else
					pub.resolveAllAndInject( fn );
			} );
		else {
			var problems = store.getAllResolvingProblems();
			if( problems.length )
				log.fatal( 'resolveAllAndInject failed because of problems', problems );
			pub.inject( fn, function() {
				var unrefered = store.getUnreferencedComponents();
				if( unrefered.length )
					log.info( 'All resolved, unrefered components', unrefered );
			} );
		}
		return pub;
	};
	pub.inject = function( fn, callback ) {
		resolver.inject( store, fn, anonymousParentResolver.resolveName( 2 ), callback );
		return pub;
	};
	pub.registerResolvedIfSetting = function( settingKey, name, instance ) {
		if( settingsHelper.getSetting( ioc.getSettings(), settingKey ) )
			pub.registerResolved( name, instance );
		return pub;
	};
	pub.registerInjectableIfSetting = function( settingKey, name, fn ) {
		if( settingsHelper.getSetting( ioc.getSettings(), settingKey ) )
			pub.registerInjectable( name, fn );
		return pub;
	};
	pub.autoRegisterPathInSetting = function( settingKey ) {
		var settingValue = settingsHelper.getSetting( ioc.getSettings(), settingKey );
		if( settingValue )
			pub.autoRegisterPath( settingValue );
		return pub;
	};

	pub.registerResolved( 'ioc', ioc )
		.registerResolved( 'container', pub )
		.registerResolved( 'errRerouter', errRerouter );

	return pub;
};